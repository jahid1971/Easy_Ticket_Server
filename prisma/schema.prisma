model User {
    id        String   @id @default(uuid())
    name      String
    email     String   @unique
    password  String
    role      String   // user, admin, operator
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    bookings  Booking[]
    payments  Payment[]
}

model Bus {
    id                 String   @id @default(uuid())
    name               String
    operator           String
    seatMap            Json     // stores seat layout template
    registrationNumber String
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    schedules          Schedule[]
}

model Route {
    id        String   @id @default(uuid())
    source    String
    destination String
    distance  Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    schedules Schedule[]
}

model Schedule {
    id         String   @id @default(uuid())
    busId      String
    routeId    String
    departureTime DateTime
    arrivalTime   DateTime
    price      Float
    date       DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    bus        Bus      @relation(fields: [busId], references: [id])
    route      Route    @relation(fields: [routeId], references: [id])
    seats      Seat[]
    bookings   Booking[]
}

model Seat {
    id         String   @id @default(uuid())
    scheduleId String
    row        String   // e.g., "A"
    column     Int      // e.g., 1
    seatNumber String   // e.g., "A1" (optional, can be generated from row+column)
    isBooked   Boolean  @default(false)
    schedule   Schedule @relation(fields: [scheduleId], references: [id])
    bookings   Booking[]
}

model Booking {
    id         String   @id @default(uuid())
    userId     String
    scheduleId String
    seatId     String
    status     String   // booked, cancelled, pending
    paymentId  String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id])
    schedule   Schedule @relation(fields: [scheduleId], references: [id])
    seat       Seat     @relation(fields: [seatId], references: [id])
    payment    Payment? @relation(fields: [paymentId], references: [id])
}

model Payment {
    id         String   @id @default(uuid())
    userId     String
    amount     Float
    status     String   // pending, completed, failed
    method     String   // card, mobile banking, etc.
    transactionId String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
    bookings    Booking[]
}